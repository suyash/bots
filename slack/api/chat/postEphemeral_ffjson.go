// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: postEphemeral.go

package chat

import (
	"bytes"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *PostEphemeralRequest) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *PostEphemeralRequest) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "token":`)
	fflib.WriteJsonString(buf, string(j.Token))
	buf.WriteByte(',')
	if len(j.Channel) != 0 {
		buf.WriteString(`"channel":`)
		fflib.WriteJsonString(buf, string(j.Channel))
		buf.WriteByte(',')
	}
	if len(j.Text) != 0 {
		buf.WriteString(`"text":`)
		fflib.WriteJsonString(buf, string(j.Text))
		buf.WriteByte(',')
	}
	if len(j.Attachments) != 0 {
		buf.WriteString(`"attachments":`)
		if j.Attachments != nil {
			buf.WriteString(`[`)
			for i, v := range j.Attachments {
				if i != 0 {
					buf.WriteString(`,`)
				}

				{

					err = v.MarshalJSONBuf(buf)
					if err != nil {
						return err
					}

				}
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.IconEmoji) != 0 {
		buf.WriteString(`"icon_emoji":`)
		fflib.WriteJsonString(buf, string(j.IconEmoji))
		buf.WriteByte(',')
	}
	if len(j.IconURL) != 0 {
		buf.WriteString(`"icon_url":`)
		fflib.WriteJsonString(buf, string(j.IconURL))
		buf.WriteByte(',')
	}
	if j.LinkNames != false {
		if j.LinkNames {
			buf.WriteString(`"link_names":true`)
		} else {
			buf.WriteString(`"link_names":false`)
		}
		buf.WriteByte(',')
	}
	if len(j.Parse) != 0 {
		buf.WriteString(`"parse":`)
		fflib.WriteJsonString(buf, string(j.Parse))
		buf.WriteByte(',')
	}
	if j.ReplyBroadcast != false {
		if j.ReplyBroadcast {
			buf.WriteString(`"reply_broadcast":true`)
		} else {
			buf.WriteString(`"reply_broadcast":false`)
		}
		buf.WriteByte(',')
	}
	if len(j.ThreadTs) != 0 {
		buf.WriteString(`"thread_ts":`)
		fflib.WriteJsonString(buf, string(j.ThreadTs))
		buf.WriteByte(',')
	}
	if j.UnfurlLinks != false {
		if j.UnfurlLinks {
			buf.WriteString(`"unfurl_links":true`)
		} else {
			buf.WriteString(`"unfurl_links":false`)
		}
		buf.WriteByte(',')
	}
	if j.UnfurlMedia != false {
		if j.UnfurlMedia {
			buf.WriteString(`"unfurl_media":true`)
		} else {
			buf.WriteString(`"unfurl_media":false`)
		}
		buf.WriteByte(',')
	}
	if len(j.Username) != 0 {
		buf.WriteString(`"username":`)
		fflib.WriteJsonString(buf, string(j.Username))
		buf.WriteByte(',')
	}
	if len(j.User) != 0 {
		buf.WriteString(`"user":`)
		fflib.WriteJsonString(buf, string(j.User))
		buf.WriteByte(',')
	}
	if len(j.Ts) != 0 {
		buf.WriteString(`"ts":`)
		fflib.WriteJsonString(buf, string(j.Ts))
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtPostEphemeralResponsebase = iota
	ffjtPostEphemeralResponsenosuchkey

	ffjtPostEphemeralResponseMessageTs
)

var ffjKeyPostEphemeralResponseMessageTs = []byte("message_ts")

// UnmarshalJSON umarshall json - template of ffjson
func (j *PostEphemeralResponse) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *PostEphemeralResponse) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtPostEphemeralResponsebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtPostEphemeralResponsenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'm':

					if bytes.Equal(ffjKeyPostEphemeralResponseMessageTs, kn) {
						currentKey = ffjtPostEphemeralResponseMessageTs
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyPostEphemeralResponseMessageTs, kn) {
					currentKey = ffjtPostEphemeralResponseMessageTs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtPostEphemeralResponsenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtPostEphemeralResponseMessageTs:
					goto handle_MessageTs

				case ffjtPostEphemeralResponsenosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_MessageTs:

	/* handler: j.MessageTs type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.MessageTs = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
