// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: message.go

package rtm

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

const (
	ffjtChannelJoinMessagebase = iota
	ffjtChannelJoinMessagenosuchkey

	ffjtChannelJoinMessageUser

	ffjtChannelJoinMessageInviter

	ffjtChannelJoinMessageUserProfile

	ffjtChannelJoinMessageType

	ffjtChannelJoinMessageSubtype

	ffjtChannelJoinMessageTeam

	ffjtChannelJoinMessageText

	ffjtChannelJoinMessageChannel

	ffjtChannelJoinMessageEventTs

	ffjtChannelJoinMessageTs
)

var ffjKeyChannelJoinMessageUser = []byte("user")

var ffjKeyChannelJoinMessageInviter = []byte("inviter")

var ffjKeyChannelJoinMessageUserProfile = []byte("user_profile")

var ffjKeyChannelJoinMessageType = []byte("type")

var ffjKeyChannelJoinMessageSubtype = []byte("subtype")

var ffjKeyChannelJoinMessageTeam = []byte("team")

var ffjKeyChannelJoinMessageText = []byte("text")

var ffjKeyChannelJoinMessageChannel = []byte("channel")

var ffjKeyChannelJoinMessageEventTs = []byte("event_ts")

var ffjKeyChannelJoinMessageTs = []byte("ts")

// UnmarshalJSON umarshall json - template of ffjson
func (j *ChannelJoinMessage) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *ChannelJoinMessage) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtChannelJoinMessagebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtChannelJoinMessagenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeyChannelJoinMessageChannel, kn) {
						currentKey = ffjtChannelJoinMessageChannel
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffjKeyChannelJoinMessageEventTs, kn) {
						currentKey = ffjtChannelJoinMessageEventTs
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyChannelJoinMessageInviter, kn) {
						currentKey = ffjtChannelJoinMessageInviter
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyChannelJoinMessageSubtype, kn) {
						currentKey = ffjtChannelJoinMessageSubtype
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyChannelJoinMessageType, kn) {
						currentKey = ffjtChannelJoinMessageType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyChannelJoinMessageTeam, kn) {
						currentKey = ffjtChannelJoinMessageTeam
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyChannelJoinMessageText, kn) {
						currentKey = ffjtChannelJoinMessageText
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyChannelJoinMessageTs, kn) {
						currentKey = ffjtChannelJoinMessageTs
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffjKeyChannelJoinMessageUser, kn) {
						currentKey = ffjtChannelJoinMessageUser
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyChannelJoinMessageUserProfile, kn) {
						currentKey = ffjtChannelJoinMessageUserProfile
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyChannelJoinMessageTs, kn) {
					currentKey = ffjtChannelJoinMessageTs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyChannelJoinMessageEventTs, kn) {
					currentKey = ffjtChannelJoinMessageEventTs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyChannelJoinMessageChannel, kn) {
					currentKey = ffjtChannelJoinMessageChannel
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyChannelJoinMessageText, kn) {
					currentKey = ffjtChannelJoinMessageText
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyChannelJoinMessageTeam, kn) {
					currentKey = ffjtChannelJoinMessageTeam
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyChannelJoinMessageSubtype, kn) {
					currentKey = ffjtChannelJoinMessageSubtype
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyChannelJoinMessageType, kn) {
					currentKey = ffjtChannelJoinMessageType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyChannelJoinMessageUserProfile, kn) {
					currentKey = ffjtChannelJoinMessageUserProfile
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyChannelJoinMessageInviter, kn) {
					currentKey = ffjtChannelJoinMessageInviter
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyChannelJoinMessageUser, kn) {
					currentKey = ffjtChannelJoinMessageUser
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtChannelJoinMessagenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtChannelJoinMessageUser:
					goto handle_User

				case ffjtChannelJoinMessageInviter:
					goto handle_Inviter

				case ffjtChannelJoinMessageUserProfile:
					goto handle_UserProfile

				case ffjtChannelJoinMessageType:
					goto handle_Type

				case ffjtChannelJoinMessageSubtype:
					goto handle_Subtype

				case ffjtChannelJoinMessageTeam:
					goto handle_Team

				case ffjtChannelJoinMessageText:
					goto handle_Text

				case ffjtChannelJoinMessageChannel:
					goto handle_Channel

				case ffjtChannelJoinMessageEventTs:
					goto handle_EventTs

				case ffjtChannelJoinMessageTs:
					goto handle_Ts

				case ffjtChannelJoinMessagenosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_User:

	/* handler: j.User type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.User = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Inviter:

	/* handler: j.Inviter type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Inviter = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_UserProfile:

	/* handler: j.UserProfile type=struct { AvatarHash string "json:\"avatar_hash\" url:\"avatar_hash\""; Image72 string "json:\"image_72\" url:\"image_72\""; FirstName interface {} "json:\"first_name\" url:\"first_name\""; RealName string "json:\"real_name\" url:\"real_name\""; DisplayName string "json:\"display_name\" url:\"display_name\""; Team string "json:\"team\" url:\"team\""; Name string "json:\"name\" url:\"name\""; IsRestricted bool "json:\"is_restricted\" url:\"is_restricted\""; IsUltraRestricted bool "json:\"is_ultra_restricted\" url:\"is_ultra_restricted\"" } kind=struct quoted=false*/

	{
		/* Falling back. type=struct { AvatarHash string "json:\"avatar_hash\" url:\"avatar_hash\""; Image72 string "json:\"image_72\" url:\"image_72\""; FirstName interface {} "json:\"first_name\" url:\"first_name\""; RealName string "json:\"real_name\" url:\"real_name\""; DisplayName string "json:\"display_name\" url:\"display_name\""; Team string "json:\"team\" url:\"team\""; Name string "json:\"name\" url:\"name\""; IsRestricted bool "json:\"is_restricted\" url:\"is_restricted\""; IsUltraRestricted bool "json:\"is_ultra_restricted\" url:\"is_ultra_restricted\"" } kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.UserProfile)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Type:

	/* handler: j.Type type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Type = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Subtype:

	/* handler: j.Subtype type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Subtype = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Team:

	/* handler: j.Team type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Team = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Text:

	/* handler: j.Text type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Text = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Channel:

	/* handler: j.Channel type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Channel = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_EventTs:

	/* handler: j.EventTs type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.EventTs = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ts:

	/* handler: j.Ts type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Ts = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

const (
	ffjtGroupJoinMessagebase = iota
	ffjtGroupJoinMessagenosuchkey

	ffjtGroupJoinMessageChannel
)

var ffjKeyGroupJoinMessageChannel = []byte("channel")

// UnmarshalJSON umarshall json - template of ffjson
func (j *GroupJoinMessage) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *GroupJoinMessage) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtGroupJoinMessagebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtGroupJoinMessagenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeyGroupJoinMessageChannel, kn) {
						currentKey = ffjtGroupJoinMessageChannel
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyGroupJoinMessageChannel, kn) {
					currentKey = ffjtGroupJoinMessageChannel
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtGroupJoinMessagenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtGroupJoinMessageChannel:
					goto handle_Channel

				case ffjtGroupJoinMessagenosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Channel:

	/* handler: j.Channel type=struct { ID string "json:\"id\" url:\"id\""; Name string "json:\"name\" url:\"name\""; IsChannel bool "json:\"is_channel\" url:\"is_channel\""; IsGroup bool "json:\"is_group\" url:\"is_group\""; IsIm bool "json:\"is_im\" url:\"is_im\""; Created int "json:\"created\" url:\"created\""; IsArchived bool "json:\"is_archived\" url:\"is_archived\""; IsGeneral bool "json:\"is_general\" url:\"is_general\""; Unlinked int "json:\"unlinked\" url:\"unlinked\""; NameNormalized string "json:\"name_normalized\" url:\"name_normalized\""; IsShared bool "json:\"is_shared\" url:\"is_shared\""; Creator string "json:\"creator\" url:\"creator\""; IsExtShared bool "json:\"is_ext_shared\" url:\"is_ext_shared\""; IsOrgShared bool "json:\"is_org_shared\" url:\"is_org_shared\""; PendingShared []interface {} "json:\"pending_shared\" url:\"pending_shared\""; IsPendingExtShared bool "json:\"is_pending_ext_shared\" url:\"is_pending_ext_shared\""; IsMember bool "json:\"is_member\" url:\"is_member\""; IsPrivate bool "json:\"is_private\" url:\"is_private\""; IsMpim bool "json:\"is_mpim\" url:\"is_mpim\""; LastRead string "json:\"last_read\" url:\"last_read\""; Latest interface {} "json:\"latest\" url:\"latest\""; UnreadCount int "json:\"unread_count\" url:\"unread_count\""; UnreadCountDisplay int "json:\"unread_count_display\" url:\"unread_count_display\""; IsOpen bool "json:\"is_open\" url:\"is_open\""; Members []string "json:\"members\" url:\"members\""; Topic struct { Value string "json:\"value\" url:\"value\""; Creator string "json:\"creator\" url:\"creator\""; LastSet int "json:\"last_set\" url:\"last_set\"" } "json:\"topic\" url:\"topic\""; Purpose struct { Value string "json:\"value\" url:\"value\""; Creator string "json:\"creator\" url:\"creator\""; LastSet int "json:\"last_set\" url:\"last_set\"" } "json:\"purpose\" url:\"purpose\"" } kind=struct quoted=false*/

	{
		/* Falling back. type=struct { ID string "json:\"id\" url:\"id\""; Name string "json:\"name\" url:\"name\""; IsChannel bool "json:\"is_channel\" url:\"is_channel\""; IsGroup bool "json:\"is_group\" url:\"is_group\""; IsIm bool "json:\"is_im\" url:\"is_im\""; Created int "json:\"created\" url:\"created\""; IsArchived bool "json:\"is_archived\" url:\"is_archived\""; IsGeneral bool "json:\"is_general\" url:\"is_general\""; Unlinked int "json:\"unlinked\" url:\"unlinked\""; NameNormalized string "json:\"name_normalized\" url:\"name_normalized\""; IsShared bool "json:\"is_shared\" url:\"is_shared\""; Creator string "json:\"creator\" url:\"creator\""; IsExtShared bool "json:\"is_ext_shared\" url:\"is_ext_shared\""; IsOrgShared bool "json:\"is_org_shared\" url:\"is_org_shared\""; PendingShared []interface {} "json:\"pending_shared\" url:\"pending_shared\""; IsPendingExtShared bool "json:\"is_pending_ext_shared\" url:\"is_pending_ext_shared\""; IsMember bool "json:\"is_member\" url:\"is_member\""; IsPrivate bool "json:\"is_private\" url:\"is_private\""; IsMpim bool "json:\"is_mpim\" url:\"is_mpim\""; LastRead string "json:\"last_read\" url:\"last_read\""; Latest interface {} "json:\"latest\" url:\"latest\""; UnreadCount int "json:\"unread_count\" url:\"unread_count\""; UnreadCountDisplay int "json:\"unread_count_display\" url:\"unread_count_display\""; IsOpen bool "json:\"is_open\" url:\"is_open\""; Members []string "json:\"members\" url:\"members\""; Topic struct { Value string "json:\"value\" url:\"value\""; Creator string "json:\"creator\" url:\"creator\""; LastSet int "json:\"last_set\" url:\"last_set\"" } "json:\"topic\" url:\"topic\""; Purpose struct { Value string "json:\"value\" url:\"value\""; Creator string "json:\"creator\" url:\"creator\""; LastSet int "json:\"last_set\" url:\"last_set\"" } "json:\"purpose\" url:\"purpose\"" } kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Channel)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

const (
	ffjtMessagebase = iota
	ffjtMessagenosuchkey

	ffjtMessageChannel

	ffjtMessageSourceTeam

	ffjtMessageTeam

	ffjtMessageText

	ffjtMessageThreadTs

	ffjtMessageTs

	ffjtMessageUser
)

var ffjKeyMessageChannel = []byte("channel")

var ffjKeyMessageSourceTeam = []byte("source_team")

var ffjKeyMessageTeam = []byte("team")

var ffjKeyMessageText = []byte("text")

var ffjKeyMessageThreadTs = []byte("thread_ts")

var ffjKeyMessageTs = []byte("ts")

var ffjKeyMessageUser = []byte("user")

// UnmarshalJSON umarshall json - template of ffjson
func (j *Message) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *Message) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtMessagebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtMessagenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeyMessageChannel, kn) {
						currentKey = ffjtMessageChannel
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyMessageSourceTeam, kn) {
						currentKey = ffjtMessageSourceTeam
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyMessageTeam, kn) {
						currentKey = ffjtMessageTeam
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyMessageText, kn) {
						currentKey = ffjtMessageText
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyMessageThreadTs, kn) {
						currentKey = ffjtMessageThreadTs
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyMessageTs, kn) {
						currentKey = ffjtMessageTs
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffjKeyMessageUser, kn) {
						currentKey = ffjtMessageUser
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyMessageUser, kn) {
					currentKey = ffjtMessageUser
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyMessageTs, kn) {
					currentKey = ffjtMessageTs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyMessageThreadTs, kn) {
					currentKey = ffjtMessageThreadTs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyMessageText, kn) {
					currentKey = ffjtMessageText
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyMessageTeam, kn) {
					currentKey = ffjtMessageTeam
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyMessageSourceTeam, kn) {
					currentKey = ffjtMessageSourceTeam
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyMessageChannel, kn) {
					currentKey = ffjtMessageChannel
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtMessagenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtMessageChannel:
					goto handle_Channel

				case ffjtMessageSourceTeam:
					goto handle_SourceTeam

				case ffjtMessageTeam:
					goto handle_Team

				case ffjtMessageText:
					goto handle_Text

				case ffjtMessageThreadTs:
					goto handle_ThreadTs

				case ffjtMessageTs:
					goto handle_Ts

				case ffjtMessageUser:
					goto handle_User

				case ffjtMessagenosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Channel:

	/* handler: j.Channel type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Channel = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SourceTeam:

	/* handler: j.SourceTeam type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.SourceTeam = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Team:

	/* handler: j.Team type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Team = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Text:

	/* handler: j.Text type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Text = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ThreadTs:

	/* handler: j.ThreadTs type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ThreadTs = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ts:

	/* handler: j.Ts type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Ts = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_User:

	/* handler: j.User type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.User = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

const (
	ffjtUserChannelJoinMessagebase = iota
	ffjtUserChannelJoinMessagenosuchkey

	ffjtUserChannelJoinMessageType

	ffjtUserChannelJoinMessageUser

	ffjtUserChannelJoinMessageChannel

	ffjtUserChannelJoinMessageChannelType

	ffjtUserChannelJoinMessageTeam

	ffjtUserChannelJoinMessageInviter

	ffjtUserChannelJoinMessageEventTs

	ffjtUserChannelJoinMessageTs
)

var ffjKeyUserChannelJoinMessageType = []byte("type")

var ffjKeyUserChannelJoinMessageUser = []byte("user")

var ffjKeyUserChannelJoinMessageChannel = []byte("channel")

var ffjKeyUserChannelJoinMessageChannelType = []byte("channel_type")

var ffjKeyUserChannelJoinMessageTeam = []byte("team")

var ffjKeyUserChannelJoinMessageInviter = []byte("inviter")

var ffjKeyUserChannelJoinMessageEventTs = []byte("event_ts")

var ffjKeyUserChannelJoinMessageTs = []byte("ts")

// UnmarshalJSON umarshall json - template of ffjson
func (j *UserChannelJoinMessage) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *UserChannelJoinMessage) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtUserChannelJoinMessagebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtUserChannelJoinMessagenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeyUserChannelJoinMessageChannel, kn) {
						currentKey = ffjtUserChannelJoinMessageChannel
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyUserChannelJoinMessageChannelType, kn) {
						currentKey = ffjtUserChannelJoinMessageChannelType
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffjKeyUserChannelJoinMessageEventTs, kn) {
						currentKey = ffjtUserChannelJoinMessageEventTs
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyUserChannelJoinMessageInviter, kn) {
						currentKey = ffjtUserChannelJoinMessageInviter
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyUserChannelJoinMessageType, kn) {
						currentKey = ffjtUserChannelJoinMessageType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyUserChannelJoinMessageTeam, kn) {
						currentKey = ffjtUserChannelJoinMessageTeam
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyUserChannelJoinMessageTs, kn) {
						currentKey = ffjtUserChannelJoinMessageTs
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffjKeyUserChannelJoinMessageUser, kn) {
						currentKey = ffjtUserChannelJoinMessageUser
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyUserChannelJoinMessageTs, kn) {
					currentKey = ffjtUserChannelJoinMessageTs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyUserChannelJoinMessageEventTs, kn) {
					currentKey = ffjtUserChannelJoinMessageEventTs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyUserChannelJoinMessageInviter, kn) {
					currentKey = ffjtUserChannelJoinMessageInviter
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyUserChannelJoinMessageTeam, kn) {
					currentKey = ffjtUserChannelJoinMessageTeam
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyUserChannelJoinMessageChannelType, kn) {
					currentKey = ffjtUserChannelJoinMessageChannelType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyUserChannelJoinMessageChannel, kn) {
					currentKey = ffjtUserChannelJoinMessageChannel
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyUserChannelJoinMessageUser, kn) {
					currentKey = ffjtUserChannelJoinMessageUser
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyUserChannelJoinMessageType, kn) {
					currentKey = ffjtUserChannelJoinMessageType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtUserChannelJoinMessagenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtUserChannelJoinMessageType:
					goto handle_Type

				case ffjtUserChannelJoinMessageUser:
					goto handle_User

				case ffjtUserChannelJoinMessageChannel:
					goto handle_Channel

				case ffjtUserChannelJoinMessageChannelType:
					goto handle_ChannelType

				case ffjtUserChannelJoinMessageTeam:
					goto handle_Team

				case ffjtUserChannelJoinMessageInviter:
					goto handle_Inviter

				case ffjtUserChannelJoinMessageEventTs:
					goto handle_EventTs

				case ffjtUserChannelJoinMessageTs:
					goto handle_Ts

				case ffjtUserChannelJoinMessagenosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Type:

	/* handler: j.Type type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Type = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_User:

	/* handler: j.User type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.User = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Channel:

	/* handler: j.Channel type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Channel = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ChannelType:

	/* handler: j.ChannelType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ChannelType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Team:

	/* handler: j.Team type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Team = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Inviter:

	/* handler: j.Inviter type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Inviter = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_EventTs:

	/* handler: j.EventTs type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.EventTs = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ts:

	/* handler: j.Ts type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Ts = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
