// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: dialog.go

package dialog

import (
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *Dialog) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Dialog) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"callback_id":`)
	fflib.WriteJsonString(buf, string(j.CallbackID))
	buf.WriteString(`,"title":`)
	fflib.WriteJsonString(buf, string(j.Title))
	buf.WriteByte(',')
	if len(j.SubmitLabel) != 0 {
		buf.WriteString(`"submit_label":`)
		fflib.WriteJsonString(buf, string(j.SubmitLabel))
		buf.WriteByte(',')
	}
	buf.WriteString(`"elements":`)
	if j.Elements != nil {
		buf.WriteString(`[`)
		for i, v := range j.Elements {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				if v == nil {
					buf.WriteString("null")
				} else {

					err = v.MarshalJSONBuf(buf)
					if err != nil {
						return err
					}

				}

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteByte('}')
	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *Element) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Element) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "label":`)
	fflib.WriteJsonString(buf, string(j.Label))
	buf.WriteString(`,"name":`)
	fflib.WriteJsonString(buf, string(j.Name))
	buf.WriteString(`,"type":`)
	fflib.WriteJsonString(buf, string(j.Type))
	buf.WriteByte(',')
	if len(j.SubType) != 0 {
		buf.WriteString(`"subtype":`)
		fflib.WriteJsonString(buf, string(j.SubType))
		buf.WriteByte(',')
	}
	if j.Optional != false {
		if j.Optional {
			buf.WriteString(`"optional":true`)
		} else {
			buf.WriteString(`"optional":false`)
		}
		buf.WriteByte(',')
	}
	if len(j.Placeholder) != 0 {
		buf.WriteString(`"placeholder":`)
		fflib.WriteJsonString(buf, string(j.Placeholder))
		buf.WriteByte(',')
	}
	if len(j.Value) != 0 {
		buf.WriteString(`"value":`)
		fflib.WriteJsonString(buf, string(j.Value))
		buf.WriteByte(',')
	}
	if len(j.Options) != 0 {
		buf.WriteString(`"options":`)
		if j.Options != nil {
			buf.WriteString(`[`)
			for i, v := range j.Options {
				if i != 0 {
					buf.WriteString(`,`)
				}

				{

					if v == nil {
						buf.WriteString("null")
					} else {

						err = v.MarshalJSONBuf(buf)
						if err != nil {
							return err
						}

					}

				}
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.Hint) != 0 {
		buf.WriteString(`"hint":`)
		fflib.WriteJsonString(buf, string(j.Hint))
		buf.WriteByte(',')
	}
	if j.MaxLength != 0 {
		buf.WriteString(`"max_length":`)
		fflib.FormatBits2(buf, uint64(j.MaxLength), 10, j.MaxLength < 0)
		buf.WriteByte(',')
	}
	if j.MinLength != 0 {
		buf.WriteString(`"min_length":`)
		fflib.FormatBits2(buf, uint64(j.MinLength), 10, j.MinLength < 0)
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *Error) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Error) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"name":`)
	fflib.WriteJsonString(buf, string(j.Name))
	buf.WriteString(`,"error":`)
	fflib.WriteJsonString(buf, string(j.Error))
	buf.WriteByte('}')
	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *SelectOption) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *SelectOption) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"label":`)
	fflib.WriteJsonString(buf, string(j.Label))
	buf.WriteString(`,"value":`)
	fflib.WriteJsonString(buf, string(j.Value))
	buf.WriteByte('}')
	return nil
}
