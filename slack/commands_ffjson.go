// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: commands.go

package slack

import (
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *commandResponse) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *commandResponse) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if len(j.ResponseType) != 0 {
		buf.WriteString(`"response_type":`)
		fflib.WriteJsonString(buf, string(j.ResponseType))
		buf.WriteByte(',')
	}
	if len(j.Channel) != 0 {
		buf.WriteString(`"channel":`)
		fflib.WriteJsonString(buf, string(j.Channel))
		buf.WriteByte(',')
	}
	if len(j.Text) != 0 {
		buf.WriteString(`"text":`)
		fflib.WriteJsonString(buf, string(j.Text))
		buf.WriteByte(',')
	}
	if len(j.Attachments) != 0 {
		buf.WriteString(`"attachments":`)
		if j.Attachments != nil {
			buf.WriteString(`[`)
			for i, v := range j.Attachments {
				if i != 0 {
					buf.WriteString(`,`)
				}

				{

					if v == nil {
						buf.WriteString("null")
					} else {

						err = v.MarshalJSONBuf(buf)
						if err != nil {
							return err
						}

					}

				}
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.IconEmoji) != 0 {
		buf.WriteString(`"icon_emoji":`)
		fflib.WriteJsonString(buf, string(j.IconEmoji))
		buf.WriteByte(',')
	}
	if len(j.IconURL) != 0 {
		buf.WriteString(`"icon_url":`)
		fflib.WriteJsonString(buf, string(j.IconURL))
		buf.WriteByte(',')
	}
	if j.LinkNames != false {
		if j.LinkNames {
			buf.WriteString(`"link_names":true`)
		} else {
			buf.WriteString(`"link_names":false`)
		}
		buf.WriteByte(',')
	}
	if len(j.Parse) != 0 {
		buf.WriteString(`"parse":`)
		fflib.WriteJsonString(buf, string(j.Parse))
		buf.WriteByte(',')
	}
	if j.ReplyBroadcast != false {
		if j.ReplyBroadcast {
			buf.WriteString(`"reply_broadcast":true`)
		} else {
			buf.WriteString(`"reply_broadcast":false`)
		}
		buf.WriteByte(',')
	}
	if len(j.ThreadTs) != 0 {
		buf.WriteString(`"thread_ts":`)
		fflib.WriteJsonString(buf, string(j.ThreadTs))
		buf.WriteByte(',')
	}
	if j.UnfurlLinks != false {
		if j.UnfurlLinks {
			buf.WriteString(`"unfurl_links":true`)
		} else {
			buf.WriteString(`"unfurl_links":false`)
		}
		buf.WriteByte(',')
	}
	if j.UnfurlMedia != false {
		if j.UnfurlMedia {
			buf.WriteString(`"unfurl_media":true`)
		} else {
			buf.WriteString(`"unfurl_media":false`)
		}
		buf.WriteByte(',')
	}
	if len(j.Username) != 0 {
		buf.WriteString(`"username":`)
		fflib.WriteJsonString(buf, string(j.Username))
		buf.WriteByte(',')
	}
	if len(j.Ts) != 0 {
		buf.WriteString(`"ts":`)
		fflib.WriteJsonString(buf, string(j.Ts))
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}
