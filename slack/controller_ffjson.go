// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: controller.go

package slack

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
	"suy.io/bots/slack/api/chat"
)

const (
	ffjtEventbase = iota
	ffjtEventnosuchkey

	ffjtEventType

	ffjtEventEventTs

	ffjtEventChannel

	ffjtEventSourceTeam

	ffjtEventTeam

	ffjtEventText

	ffjtEventThreadTs

	ffjtEventTs

	ffjtEventUser
)

var ffjKeyEventType = []byte("type")

var ffjKeyEventEventTs = []byte("event_ts")

var ffjKeyEventChannel = []byte("channel")

var ffjKeyEventSourceTeam = []byte("source_team")

var ffjKeyEventTeam = []byte("team")

var ffjKeyEventText = []byte("text")

var ffjKeyEventThreadTs = []byte("thread_ts")

var ffjKeyEventTs = []byte("ts")

var ffjKeyEventUser = []byte("user")

// UnmarshalJSON umarshall json - template of ffjson
func (j *Event) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *Event) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtEventbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtEventnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeyEventChannel, kn) {
						currentKey = ffjtEventChannel
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffjKeyEventEventTs, kn) {
						currentKey = ffjtEventEventTs
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyEventSourceTeam, kn) {
						currentKey = ffjtEventSourceTeam
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyEventType, kn) {
						currentKey = ffjtEventType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyEventTeam, kn) {
						currentKey = ffjtEventTeam
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyEventText, kn) {
						currentKey = ffjtEventText
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyEventThreadTs, kn) {
						currentKey = ffjtEventThreadTs
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyEventTs, kn) {
						currentKey = ffjtEventTs
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffjKeyEventUser, kn) {
						currentKey = ffjtEventUser
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyEventUser, kn) {
					currentKey = ffjtEventUser
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyEventTs, kn) {
					currentKey = ffjtEventTs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyEventThreadTs, kn) {
					currentKey = ffjtEventThreadTs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyEventText, kn) {
					currentKey = ffjtEventText
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyEventTeam, kn) {
					currentKey = ffjtEventTeam
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyEventSourceTeam, kn) {
					currentKey = ffjtEventSourceTeam
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyEventChannel, kn) {
					currentKey = ffjtEventChannel
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyEventEventTs, kn) {
					currentKey = ffjtEventEventTs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyEventType, kn) {
					currentKey = ffjtEventType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtEventnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtEventType:
					goto handle_Type

				case ffjtEventEventTs:
					goto handle_EventTs

				case ffjtEventChannel:
					goto handle_Channel

				case ffjtEventSourceTeam:
					goto handle_SourceTeam

				case ffjtEventTeam:
					goto handle_Team

				case ffjtEventText:
					goto handle_Text

				case ffjtEventThreadTs:
					goto handle_ThreadTs

				case ffjtEventTs:
					goto handle_Ts

				case ffjtEventUser:
					goto handle_User

				case ffjtEventnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Type:

	/* handler: j.Type type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Type = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_EventTs:

	/* handler: j.EventTs type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.EventTs = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Channel:

	/* handler: j.Channel type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Channel = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SourceTeam:

	/* handler: j.SourceTeam type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.SourceTeam = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Team:

	/* handler: j.Team type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Team = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Text:

	/* handler: j.Text type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Text = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ThreadTs:

	/* handler: j.ThreadTs type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ThreadTs = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ts:

	/* handler: j.Ts type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Ts = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_User:

	/* handler: j.User type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.User = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

const (
	ffjtEventPayloadbase = iota
	ffjtEventPayloadnosuchkey

	ffjtEventPayloadToken

	ffjtEventPayloadTeamID

	ffjtEventPayloadAPIAppID

	ffjtEventPayloadEvent

	ffjtEventPayloadType

	ffjtEventPayloadEventID

	ffjtEventPayloadEventTime

	ffjtEventPayloadAuthedUsers
)

var ffjKeyEventPayloadToken = []byte("token")

var ffjKeyEventPayloadTeamID = []byte("team_id")

var ffjKeyEventPayloadAPIAppID = []byte("api_app_id")

var ffjKeyEventPayloadEvent = []byte("event")

var ffjKeyEventPayloadType = []byte("type")

var ffjKeyEventPayloadEventID = []byte("event_id")

var ffjKeyEventPayloadEventTime = []byte("event_time")

var ffjKeyEventPayloadAuthedUsers = []byte("authed_users")

// UnmarshalJSON umarshall json - template of ffjson
func (j *EventPayload) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *EventPayload) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtEventPayloadbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtEventPayloadnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeyEventPayloadAPIAppID, kn) {
						currentKey = ffjtEventPayloadAPIAppID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyEventPayloadAuthedUsers, kn) {
						currentKey = ffjtEventPayloadAuthedUsers
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffjKeyEventPayloadEvent, kn) {
						currentKey = ffjtEventPayloadEvent
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyEventPayloadEventID, kn) {
						currentKey = ffjtEventPayloadEventID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyEventPayloadEventTime, kn) {
						currentKey = ffjtEventPayloadEventTime
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyEventPayloadToken, kn) {
						currentKey = ffjtEventPayloadToken
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyEventPayloadTeamID, kn) {
						currentKey = ffjtEventPayloadTeamID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyEventPayloadType, kn) {
						currentKey = ffjtEventPayloadType
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyEventPayloadAuthedUsers, kn) {
					currentKey = ffjtEventPayloadAuthedUsers
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyEventPayloadEventTime, kn) {
					currentKey = ffjtEventPayloadEventTime
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyEventPayloadEventID, kn) {
					currentKey = ffjtEventPayloadEventID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyEventPayloadType, kn) {
					currentKey = ffjtEventPayloadType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyEventPayloadEvent, kn) {
					currentKey = ffjtEventPayloadEvent
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyEventPayloadAPIAppID, kn) {
					currentKey = ffjtEventPayloadAPIAppID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyEventPayloadTeamID, kn) {
					currentKey = ffjtEventPayloadTeamID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyEventPayloadToken, kn) {
					currentKey = ffjtEventPayloadToken
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtEventPayloadnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtEventPayloadToken:
					goto handle_Token

				case ffjtEventPayloadTeamID:
					goto handle_TeamID

				case ffjtEventPayloadAPIAppID:
					goto handle_APIAppID

				case ffjtEventPayloadEvent:
					goto handle_Event

				case ffjtEventPayloadType:
					goto handle_Type

				case ffjtEventPayloadEventID:
					goto handle_EventID

				case ffjtEventPayloadEventTime:
					goto handle_EventTime

				case ffjtEventPayloadAuthedUsers:
					goto handle_AuthedUsers

				case ffjtEventPayloadnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Token:

	/* handler: j.Token type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Token = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TeamID:

	/* handler: j.TeamID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.TeamID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_APIAppID:

	/* handler: j.APIAppID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.APIAppID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Event:

	/* handler: j.Event type=slack.Event kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			j.Event = nil

		} else {

			if j.Event == nil {
				j.Event = new(Event)
			}

			err = j.Event.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
			if err != nil {
				return err
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Type:

	/* handler: j.Type type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Type = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_EventID:

	/* handler: j.EventID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.EventID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_EventTime:

	/* handler: j.EventTime type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.EventTime = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AuthedUsers:

	/* handler: j.AuthedUsers type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.AuthedUsers = nil
		} else {

			j.AuthedUsers = []string{}

			wantVal := true

			for {

				var tmpJAuthedUsers string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJAuthedUsers type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmpJAuthedUsers = string(string(outBuf))

					}
				}

				j.AuthedUsers = append(j.AuthedUsers, tmpJAuthedUsers)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

const (
	ffjtinteractionbase = iota
	ffjtinteractionnosuchkey

	ffjtinteractionToken

	ffjtinteractionActions

	ffjtinteractionTeam

	ffjtinteractionChannel

	ffjtinteractionUser

	ffjtinteractionActionTs

	ffjtinteractionMessageTs

	ffjtinteractionAttachmentID

	ffjtinteractionCallbackID

	ffjtinteractionIsAppUnfurl

	ffjtinteractionOriginalMessage

	ffjtinteractionResponseURL

	ffjtinteractionTriggerID

	ffjtinteractionType

	ffjtinteractionSubmission
)

var ffjKeyinteractionToken = []byte("token")

var ffjKeyinteractionActions = []byte("actions")

var ffjKeyinteractionTeam = []byte("team")

var ffjKeyinteractionChannel = []byte("channel")

var ffjKeyinteractionUser = []byte("user")

var ffjKeyinteractionActionTs = []byte("action_ts")

var ffjKeyinteractionMessageTs = []byte("message_ts")

var ffjKeyinteractionAttachmentID = []byte("attachment_id")

var ffjKeyinteractionCallbackID = []byte("callback_id")

var ffjKeyinteractionIsAppUnfurl = []byte("is_app_unfurl")

var ffjKeyinteractionOriginalMessage = []byte("original_message")

var ffjKeyinteractionResponseURL = []byte("response_url")

var ffjKeyinteractionTriggerID = []byte("trigger_id")

var ffjKeyinteractionType = []byte("type")

var ffjKeyinteractionSubmission = []byte("submission")

// UnmarshalJSON umarshall json - template of ffjson
func (j *interaction) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *interaction) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtinteractionbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtinteractionnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeyinteractionActions, kn) {
						currentKey = ffjtinteractionActions
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyinteractionActionTs, kn) {
						currentKey = ffjtinteractionActionTs
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyinteractionAttachmentID, kn) {
						currentKey = ffjtinteractionAttachmentID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffjKeyinteractionChannel, kn) {
						currentKey = ffjtinteractionChannel
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyinteractionCallbackID, kn) {
						currentKey = ffjtinteractionCallbackID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyinteractionIsAppUnfurl, kn) {
						currentKey = ffjtinteractionIsAppUnfurl
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffjKeyinteractionMessageTs, kn) {
						currentKey = ffjtinteractionMessageTs
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffjKeyinteractionOriginalMessage, kn) {
						currentKey = ffjtinteractionOriginalMessage
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffjKeyinteractionResponseURL, kn) {
						currentKey = ffjtinteractionResponseURL
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyinteractionSubmission, kn) {
						currentKey = ffjtinteractionSubmission
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyinteractionToken, kn) {
						currentKey = ffjtinteractionToken
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyinteractionTeam, kn) {
						currentKey = ffjtinteractionTeam
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyinteractionTriggerID, kn) {
						currentKey = ffjtinteractionTriggerID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyinteractionType, kn) {
						currentKey = ffjtinteractionType
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffjKeyinteractionUser, kn) {
						currentKey = ffjtinteractionUser
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyinteractionSubmission, kn) {
					currentKey = ffjtinteractionSubmission
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyinteractionType, kn) {
					currentKey = ffjtinteractionType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyinteractionTriggerID, kn) {
					currentKey = ffjtinteractionTriggerID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyinteractionResponseURL, kn) {
					currentKey = ffjtinteractionResponseURL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyinteractionOriginalMessage, kn) {
					currentKey = ffjtinteractionOriginalMessage
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyinteractionIsAppUnfurl, kn) {
					currentKey = ffjtinteractionIsAppUnfurl
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyinteractionCallbackID, kn) {
					currentKey = ffjtinteractionCallbackID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyinteractionAttachmentID, kn) {
					currentKey = ffjtinteractionAttachmentID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyinteractionMessageTs, kn) {
					currentKey = ffjtinteractionMessageTs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyinteractionActionTs, kn) {
					currentKey = ffjtinteractionActionTs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyinteractionUser, kn) {
					currentKey = ffjtinteractionUser
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyinteractionChannel, kn) {
					currentKey = ffjtinteractionChannel
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyinteractionTeam, kn) {
					currentKey = ffjtinteractionTeam
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyinteractionActions, kn) {
					currentKey = ffjtinteractionActions
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyinteractionToken, kn) {
					currentKey = ffjtinteractionToken
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtinteractionnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtinteractionToken:
					goto handle_Token

				case ffjtinteractionActions:
					goto handle_Actions

				case ffjtinteractionTeam:
					goto handle_Team

				case ffjtinteractionChannel:
					goto handle_Channel

				case ffjtinteractionUser:
					goto handle_User

				case ffjtinteractionActionTs:
					goto handle_ActionTs

				case ffjtinteractionMessageTs:
					goto handle_MessageTs

				case ffjtinteractionAttachmentID:
					goto handle_AttachmentID

				case ffjtinteractionCallbackID:
					goto handle_CallbackID

				case ffjtinteractionIsAppUnfurl:
					goto handle_IsAppUnfurl

				case ffjtinteractionOriginalMessage:
					goto handle_OriginalMessage

				case ffjtinteractionResponseURL:
					goto handle_ResponseURL

				case ffjtinteractionTriggerID:
					goto handle_TriggerID

				case ffjtinteractionType:
					goto handle_Type

				case ffjtinteractionSubmission:
					goto handle_Submission

				case ffjtinteractionnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Token:

	/* handler: j.Token type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Token = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Actions:

	/* handler: j.Actions type=[]*struct { Name string "json:\"name\""; Value string "json:\"value,omitempty\""; Text string "json:\"text,omitempty\""; Type string "json:\"type\""; SelectedOptions []struct { Value string "json:\"value\"" } "json:\"selected_options,omitempty\"" } kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Actions = nil
		} else {

			j.Actions = []*struct {
				Name            string "json:\"name\""
				Value           string "json:\"value,omitempty\""
				Text            string "json:\"text,omitempty\""
				Type            string "json:\"type\""
				SelectedOptions []struct {
					Value string "json:\"value\""
				} "json:\"selected_options,omitempty\""
			}{}

			wantVal := true

			for {

				var tmpJActions *struct {
					Name            string "json:\"name\""
					Value           string "json:\"value,omitempty\""
					Text            string "json:\"text,omitempty\""
					Type            string "json:\"type\""
					SelectedOptions []struct {
						Value string "json:\"value\""
					} "json:\"selected_options,omitempty\""
				}

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJActions type=*struct { Name string "json:\"name\""; Value string "json:\"value,omitempty\""; Text string "json:\"text,omitempty\""; Type string "json:\"type\""; SelectedOptions []struct { Value string "json:\"value\"" } "json:\"selected_options,omitempty\"" } kind=ptr quoted=false*/

				{

					if tok == fflib.FFTok_null {
						tmpJActions = nil
					} else {
						if tmpJActions == nil {
							tmpJActions = new(struct {
								Name            string "json:\"name\""
								Value           string "json:\"value,omitempty\""
								Text            string "json:\"text,omitempty\""
								Type            string "json:\"type\""
								SelectedOptions []struct {
									Value string "json:\"value\""
								} "json:\"selected_options,omitempty\""
							})
						}

						/* handler: tmpJActions type=struct { Name string "json:\"name\""; Value string "json:\"value,omitempty\""; Text string "json:\"text,omitempty\""; Type string "json:\"type\""; SelectedOptions []struct { Value string "json:\"value\"" } "json:\"selected_options,omitempty\"" } kind=struct quoted=false*/

						{
							/* Falling back. type=struct { Name string "json:\"name\""; Value string "json:\"value,omitempty\""; Text string "json:\"text,omitempty\""; Type string "json:\"type\""; SelectedOptions []struct { Value string "json:\"value\"" } "json:\"selected_options,omitempty\"" } kind=struct */
							tbuf, err := fs.CaptureField(tok)
							if err != nil {
								return fs.WrapErr(err)
							}

							err = json.Unmarshal(tbuf, &tmpJActions)
							if err != nil {
								return fs.WrapErr(err)
							}
						}

					}
				}

				j.Actions = append(j.Actions, tmpJActions)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Team:

	/* handler: j.Team type=struct { ID string "json:\"id\""; Domain string "json:\"domain\"" } kind=struct quoted=false*/

	{
		/* Falling back. type=struct { ID string "json:\"id\""; Domain string "json:\"domain\"" } kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Team)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Channel:

	/* handler: j.Channel type=struct { ID string "json:\"id\""; Name string "json:\"name\"" } kind=struct quoted=false*/

	{
		/* Falling back. type=struct { ID string "json:\"id\""; Name string "json:\"name\"" } kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Channel)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_User:

	/* handler: j.User type=struct { ID string "json:\"id\""; Name string "json:\"name\"" } kind=struct quoted=false*/

	{
		/* Falling back. type=struct { ID string "json:\"id\""; Name string "json:\"name\"" } kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.User)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ActionTs:

	/* handler: j.ActionTs type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ActionTs = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MessageTs:

	/* handler: j.MessageTs type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.MessageTs = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AttachmentID:

	/* handler: j.AttachmentID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.AttachmentID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CallbackID:

	/* handler: j.CallbackID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CallbackID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_IsAppUnfurl:

	/* handler: j.IsAppUnfurl type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.IsAppUnfurl = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.IsAppUnfurl = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OriginalMessage:

	/* handler: j.OriginalMessage type=chat.Message kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			j.OriginalMessage = nil

		} else {

			if j.OriginalMessage == nil {
				j.OriginalMessage = new(chat.Message)
			}

			err = j.OriginalMessage.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
			if err != nil {
				return err
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ResponseURL:

	/* handler: j.ResponseURL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ResponseURL = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TriggerID:

	/* handler: j.TriggerID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.TriggerID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Type:

	/* handler: j.Type type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Type = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Submission:

	/* handler: j.Submission type=json.RawMessage kind=slice quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.Submission.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

const (
	ffjtinteractionOptionsbase = iota
	ffjtinteractionOptionsnosuchkey

	ffjtinteractionOptionsToken

	ffjtinteractionOptionsName

	ffjtinteractionOptionsValue

	ffjtinteractionOptionsCallbackID

	ffjtinteractionOptionsTeam

	ffjtinteractionOptionsChannel

	ffjtinteractionOptionsUser

	ffjtinteractionOptionsActionTs

	ffjtinteractionOptionsMessageTs

	ffjtinteractionOptionsAttachmentID
)

var ffjKeyinteractionOptionsToken = []byte("token")

var ffjKeyinteractionOptionsName = []byte("name")

var ffjKeyinteractionOptionsValue = []byte("value")

var ffjKeyinteractionOptionsCallbackID = []byte("callback_id")

var ffjKeyinteractionOptionsTeam = []byte("team")

var ffjKeyinteractionOptionsChannel = []byte("channel")

var ffjKeyinteractionOptionsUser = []byte("user")

var ffjKeyinteractionOptionsActionTs = []byte("action_ts")

var ffjKeyinteractionOptionsMessageTs = []byte("message_ts")

var ffjKeyinteractionOptionsAttachmentID = []byte("attachment_id")

// UnmarshalJSON umarshall json - template of ffjson
func (j *interactionOptions) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *interactionOptions) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtinteractionOptionsbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtinteractionOptionsnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeyinteractionOptionsActionTs, kn) {
						currentKey = ffjtinteractionOptionsActionTs
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyinteractionOptionsAttachmentID, kn) {
						currentKey = ffjtinteractionOptionsAttachmentID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffjKeyinteractionOptionsCallbackID, kn) {
						currentKey = ffjtinteractionOptionsCallbackID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyinteractionOptionsChannel, kn) {
						currentKey = ffjtinteractionOptionsChannel
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffjKeyinteractionOptionsMessageTs, kn) {
						currentKey = ffjtinteractionOptionsMessageTs
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'n':

					if bytes.Equal(ffjKeyinteractionOptionsName, kn) {
						currentKey = ffjtinteractionOptionsName
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyinteractionOptionsToken, kn) {
						currentKey = ffjtinteractionOptionsToken
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyinteractionOptionsTeam, kn) {
						currentKey = ffjtinteractionOptionsTeam
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffjKeyinteractionOptionsUser, kn) {
						currentKey = ffjtinteractionOptionsUser
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffjKeyinteractionOptionsValue, kn) {
						currentKey = ffjtinteractionOptionsValue
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.AsciiEqualFold(ffjKeyinteractionOptionsAttachmentID, kn) {
					currentKey = ffjtinteractionOptionsAttachmentID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyinteractionOptionsMessageTs, kn) {
					currentKey = ffjtinteractionOptionsMessageTs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyinteractionOptionsActionTs, kn) {
					currentKey = ffjtinteractionOptionsActionTs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyinteractionOptionsUser, kn) {
					currentKey = ffjtinteractionOptionsUser
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyinteractionOptionsChannel, kn) {
					currentKey = ffjtinteractionOptionsChannel
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyinteractionOptionsTeam, kn) {
					currentKey = ffjtinteractionOptionsTeam
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyinteractionOptionsCallbackID, kn) {
					currentKey = ffjtinteractionOptionsCallbackID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyinteractionOptionsValue, kn) {
					currentKey = ffjtinteractionOptionsValue
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyinteractionOptionsName, kn) {
					currentKey = ffjtinteractionOptionsName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyinteractionOptionsToken, kn) {
					currentKey = ffjtinteractionOptionsToken
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtinteractionOptionsnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtinteractionOptionsToken:
					goto handle_Token

				case ffjtinteractionOptionsName:
					goto handle_Name

				case ffjtinteractionOptionsValue:
					goto handle_Value

				case ffjtinteractionOptionsCallbackID:
					goto handle_CallbackID

				case ffjtinteractionOptionsTeam:
					goto handle_Team

				case ffjtinteractionOptionsChannel:
					goto handle_Channel

				case ffjtinteractionOptionsUser:
					goto handle_User

				case ffjtinteractionOptionsActionTs:
					goto handle_ActionTs

				case ffjtinteractionOptionsMessageTs:
					goto handle_MessageTs

				case ffjtinteractionOptionsAttachmentID:
					goto handle_AttachmentID

				case ffjtinteractionOptionsnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Token:

	/* handler: j.Token type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Token = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Name:

	/* handler: j.Name type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Name = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Value:

	/* handler: j.Value type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Value = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CallbackID:

	/* handler: j.CallbackID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CallbackID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Team:

	/* handler: j.Team type=struct { ID string "json:\"id\""; Domain string "json:\"domain\"" } kind=struct quoted=false*/

	{
		/* Falling back. type=struct { ID string "json:\"id\""; Domain string "json:\"domain\"" } kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Team)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Channel:

	/* handler: j.Channel type=struct { ID string "json:\"id\""; Name string "json:\"name\"" } kind=struct quoted=false*/

	{
		/* Falling back. type=struct { ID string "json:\"id\""; Name string "json:\"name\"" } kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Channel)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_User:

	/* handler: j.User type=struct { ID string "json:\"id\""; Name string "json:\"name\"" } kind=struct quoted=false*/

	{
		/* Falling back. type=struct { ID string "json:\"id\""; Name string "json:\"name\"" } kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.User)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ActionTs:

	/* handler: j.ActionTs type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ActionTs = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MessageTs:

	/* handler: j.MessageTs type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.MessageTs = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AttachmentID:

	/* handler: j.AttachmentID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.AttachmentID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

const (
	ffjttypbase = iota
	ffjttypnosuchkey

	ffjttypSubType

	ffjttypType

	ffjttypUser

	ffjttypToken

	ffjttypChallenge
)

var ffjKeytypSubType = []byte("subtype")

var ffjKeytypType = []byte("type")

var ffjKeytypUser = []byte("user")

var ffjKeytypToken = []byte("token")

var ffjKeytypChallenge = []byte("challenge")

// UnmarshalJSON umarshall json - template of ffjson
func (j *typ) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *typ) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjttypbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjttypnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeytypChallenge, kn) {
						currentKey = ffjttypChallenge
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeytypSubType, kn) {
						currentKey = ffjttypSubType
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeytypType, kn) {
						currentKey = ffjttypType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeytypToken, kn) {
						currentKey = ffjttypToken
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffjKeytypUser, kn) {
						currentKey = ffjttypUser
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeytypChallenge, kn) {
					currentKey = ffjttypChallenge
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeytypToken, kn) {
					currentKey = ffjttypToken
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeytypUser, kn) {
					currentKey = ffjttypUser
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeytypType, kn) {
					currentKey = ffjttypType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeytypSubType, kn) {
					currentKey = ffjttypSubType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjttypnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjttypSubType:
					goto handle_SubType

				case ffjttypType:
					goto handle_Type

				case ffjttypUser:
					goto handle_User

				case ffjttypToken:
					goto handle_Token

				case ffjttypChallenge:
					goto handle_Challenge

				case ffjttypnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_SubType:

	/* handler: j.SubType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.SubType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Type:

	/* handler: j.Type type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Type = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_User:

	/* handler: j.User type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.User = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Token:

	/* handler: j.Token type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Token = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Challenge:

	/* handler: j.Challenge type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Challenge = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
